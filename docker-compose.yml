version: '3.8'

services:
  app:
    build:
      dockerfile: Dockerfile
    container_name: app
    volumes:
      - .env:/app/.env
      - .gitignore:/app/.gitignore
      - ./alembic:/app/alembic
      - ./src:/app/src
      - ./alembic.ini:/app/alembic.ini
      - ./entrypoint.sh:/app/entrypoint.sh
      - ./poetry.lock:/app/poetry.lock
      - ./pyproject.toml:/app/pyproject.toml
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    restart: on-failure
  
  db:
    image: postgres
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST: ${POSTGRES__POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES__POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES__POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES__POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES__POSTGRES_PASS}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__POSTGRES_USER} -d ${POSTGRES__POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
  
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/var/lib/redis/data
    environment:
      - REDIS_PASSWORD=${REDIS__REDIS_PASSWORD}
      - REDIS_PORT=${REDIS__REDIS_PORT}
      - REDIS_DATABASES=${REDIS__REDIS_DATABASES}